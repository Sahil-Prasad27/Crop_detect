# app.py - AI Crop Recommendation (Bilingual)
import streamlit as st
from pathlib import Path
import pandas as pd
import altair as alt
from crop_predictor import FEATURES, load_model, recommend_topk, load_metadata

# -------------------------------
# Paths
# -------------------------------
EXPORT_DIR = Path("export_model")
MODEL_PATH = EXPORT_DIR / "crop_recommender_rf.joblib"
META_PATH = EXPORT_DIR / "model_metadata.json"

# -------------------------------
# Page Config
# -------------------------------
st.set_page_config(page_title="AI Crop Recommendation üå±", layout="wide")

# -------------------------------
# Custom CSS
# -------------------------------
st.markdown("""
    <style>
    .stApp {
        background: linear-gradient(rgba(0,0,0,0.55), rgba(0,0,0,0.55)), 
                    url("https://images.unsplash.com/photo-1500937386664-56d1dfef3854?auto=format&fit=crop&w=1600&q=80");
        background-size: cover;
        background-position: center;
        color: white !important;
    }
    h1, h2, h3, h4, h5 {
        color: white !important;
    }
    div.stButton > button {
        background-color: #4caf50;
        color: white;
        border-radius: 25px;
        padding: 0.6em 1.5em;
        font-weight: bold;
        border: none;
    }
    div.stButton > button:hover {
        background-color: #388e3c;
    }
    div[data-baseweb="select"] > div {
        background-color: white !important;
        color: black !important;
        border-radius: 8px;
    }
    </style>
""", unsafe_allow_html=True)

# -------------------------------
# Load Model
# -------------------------------
with st.spinner("Loading model..."):
    try:
        model = load_model(MODEL_PATH.as_posix())
    except Exception as e:
        st.error(f"Failed to load model: {e}")
        model = None

metadata = load_metadata(META_PATH.as_posix())

# -------------------------------
# Translation dictionary
# -------------------------------
trans = {
    "English": {
        "hero_title": "Earth-Friendly Agriculture for a Better Tomorrow üåç",
        "hero_sub": "Unleash creativity in farming ‚Äî discover innovative techniques to boost productivity and deepen your connection with the land.",
        "get_started": "Get Started Now",
        "learn_service": "Learn Service",
        "enter_conditions": "Enter Soil & Weather Conditions",
        "Nitrogen": "Nitrogen (N)",
        "Phosphorus": "Phosphorus (P)",
        "Potassium": "Potassium (K)",
        "pH": "Soil pH",
        "Temperature": "Temperature (¬∞C)",
        "Humidity": "Humidity (%)",
        "Rainfall": "Rainfall (mm)",
        "top_k": "Number of top recommendations",
        "recommend": "Recommend Crops üåæ",
        "top_crops": "‚úÖ Top Recommended Crops",
        "probabilities": "üìä Prediction Probabilities"
    },
    "‡§π‡§ø‡§Ç‡§¶‡•Ä": {
        "hero_title": "‡§è‡§ï ‡§¨‡•á‡§π‡§§‡§∞ ‡§ï‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡§∞‡•ç‡§Ø‡§æ‡§µ‡§∞‡§£-‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤ ‡§ï‡•É‡§∑‡§ø üåç",
        "hero_sub": "‡§ñ‡•á‡§§‡•Ä ‡§Æ‡•á‡§Ç ‡§∞‡§ö‡§®‡§æ‡§§‡•ç‡§Æ‡§ï‡§§‡§æ ‡§ï‡•ã ‡§â‡§ú‡§æ‡§ó‡§∞ ‡§ï‡§∞‡•á‡§Ç ‚Äî ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§ï‡§§‡§æ ‡§¨‡§¢‡§º‡§æ‡§®‡•á ‡§î‡§∞ ‡§≠‡•Ç‡§Æ‡§ø ‡§∏‡•á ‡§ó‡§π‡§∞‡§æ ‡§∏‡§Ç‡§¨‡§Ç‡§ß ‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡§à ‡§§‡§ï‡§®‡•Ä‡§ï‡•ã‡§Ç ‡§ï‡•Ä ‡§ñ‡•ã‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§",
        "get_started": "‡§Ö‡§≠‡•Ä ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç",
        "learn_service": "‡§∏‡•á‡§µ‡§æ ‡§ú‡§æ‡§®‡•á‡§Ç",
        "enter_conditions": "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§î‡§∞ ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
        "Nitrogen": "‡§®‡§æ‡§á‡§ü‡•ç‡§∞‡•ã‡§ú‡§® (N)",
        "Phosphorus": "‡§´‡•â‡§∏‡•ç‡§´‡•ã‡§∞‡§∏ (P)",
        "Potassium": "‡§™‡•ã‡§ü‡•á‡§∂‡§ø‡§Ø‡§Æ (K)",
        "pH": "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡§æ ‡§™‡•Ä‡§è‡§ö",
        "Temperature": "‡§§‡§æ‡§™‡§Æ‡§æ‡§® (¬∞C)",
        "Humidity": "‡§®‡§Æ‡•Ä (%)",
        "Rainfall": "‡§µ‡§∞‡•ç‡§∑‡§æ (‡§Æ‡§ø‡§Æ‡•Ä)",
        "top_k": "‡§∂‡•Ä‡§∞‡•ç‡§∑ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ",
        "recommend": "‡§´‡§∏‡§≤ ‡§∏‡•Å‡§ù‡§æ‡§è‡§Å üåæ",
        "top_crops": "‚úÖ ‡§∂‡•Ä‡§∞‡•ç‡§∑ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂ ‡§ï‡•Ä ‡§ó‡§à ‡§´‡§∏‡§≤‡•á‡§Ç",
        "probabilities": "üìä ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ‡§è‡§Å"
    }
}

# -------------------------------
# Crop name translations
# -------------------------------
crop_trans = {
    "rice": "‡§ö‡§æ‡§µ‡§≤",
    "wheat": "‡§ó‡•á‡§π‡•Ç‡§Å",
    "maize": "‡§Æ‡§ï‡•ç‡§ï‡§æ",
    "chickpea": "‡§ö‡§®‡§æ",
    "kidneybeans": "‡§∞‡§æ‡§ú‡§Æ‡§æ",
    "pigeonpeas": "‡§Ö‡§∞‡§π‡§∞",
    "mothbeans": "‡§Æ‡§ü‡§ï‡•Ä",
    "mungbean": "‡§Æ‡•Ç‡§Å‡§ó",
    "blackgram": "‡§â‡§°‡§º‡§¶",
    "lentil": "‡§Æ‡§∏‡•Ç‡§∞",
    "pomegranate": "‡§Ö‡§®‡§æ‡§∞",
    "banana": "‡§ï‡•á‡§≤‡§æ",
    "mango": "‡§Ü‡§Æ",
    "grapes": "‡§Ö‡§Ç‡§ó‡•Ç‡§∞",
    "watermelon": "‡§§‡§∞‡§¨‡•Ç‡§ú",
    "muskmelon": "‡§ñ‡§∞‡§¨‡•Ç‡§ú‡§æ",
    "apple": "‡§∏‡•á‡§¨",
    "orange": "‡§∏‡§Ç‡§§‡§∞‡§æ",
    "papaya": "‡§™‡§™‡•Ä‡§§‡§æ",
    "coconut": "‡§®‡§æ‡§∞‡§ø‡§Ø‡§≤",
    "cotton": "‡§ï‡§™‡§æ‡§∏",
    "jute": "‡§ú‡•Ç‡§ü",
    "coffee": "‡§ï‡•â‡§´‡§º‡•Ä"
}

# -------------------------------
# Language Selector + Hero Section
# -------------------------------
lang = st.selectbox("üåê Select Language / ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç", ["English", "‡§π‡§ø‡§Ç‡§¶‡•Ä"])
t = trans[lang]

st.markdown(
    f"""
    <div style="padding: 60px 20px; text-align:center;">
        <h1 style="font-size: 3rem; font-weight: bold;">
            {t["hero_title"]}
        </h1>
        <p style="font-size: 1.2rem; max-width: 700px; margin:auto; color: #ddd;">
            {t["hero_sub"]}
        </p>
        <div style="margin-top: 20px;">
            <a href="#prediction" style="text-decoration: none;">
                <button style="background-color:#c6ff00; color:black; padding: 0.7em 1.5em; border-radius: 30px; border:none; font-weight:bold; margin-right:10px;">
                    {t["get_started"]}
                </button>
            </a>
            <a href="#service" style="text-decoration: none;">
                <button style="background-color:white; color:black; padding: 0.7em 1.5em; border-radius: 30px; border:none; font-weight:bold;">
                    {t["learn_service"]}
                </button>
            </a>
        </div>
    </div>
    """, unsafe_allow_html=True
)

# -------------------------------
# Prediction Section
# -------------------------------
st.markdown("<div id='prediction'></div>", unsafe_allow_html=True)
st.header(t["enter_conditions"])

col1, col2 = st.columns(2)

with col1:
    N = st.number_input(t["Nitrogen"], min_value=0, max_value=200, value=50)
    P = st.number_input(t["Phosphorus"], min_value=0, max_value=200, value=50)
    K = st.number_input(t["Potassium"], min_value=0, max_value=200, value=50)
    ph = st.number_input(t["pH"], min_value=0.0, max_value=14.0, value=6.5)

with col2:
    temperature = st.number_input(t["Temperature"], min_value=-10.0, max_value=60.0, value=25.0)
    humidity = st.number_input(t["Humidity"], min_value=0.0, max_value=100.0, value=80.0)
    rainfall = st.number_input(t["Rainfall"], min_value=0.0, max_value=500.0, value=200.0)

k = st.slider(t["top_k"], min_value=1, max_value=10, value=5)

# -------------------------------
# Predict
# -------------------------------
if st.button(t["recommend"]):
    if model is None:
        st.error("Model is not loaded. Cannot make predictions.")
    else:
        topk, proba, labels = recommend_topk(
            model,
            N=N, P=P, K=K,
            temperature=temperature,
            humidity=humidity,
            ph=ph,
            rainfall=rainfall,
            k=k
        )

        st.subheader(t["top_crops"])
        for crop, score in topk:
            display_crop = crop_trans[crop] if lang == "‡§π‡§ø‡§Ç‡§¶‡•Ä" and crop in crop_trans else crop
            st.write(f"- **{display_crop}** ({score:.2%})")

        st.subheader(t["probabilities"])
        df_proba = pd.DataFrame({"Crop": labels, "Probability": proba})
        df_top = df_proba.sort_values("Probability", ascending=False).head(k)

        if lang == "‡§π‡§ø‡§Ç‡§¶‡•Ä":
            df_top["Crop"] = df_top["Crop"].apply(lambda c: crop_trans[c] if c in crop_trans else c)

        chart = (
            alt.Chart(df_top)
            .mark_bar(color="#c6ff00")
            .encode(
                x=alt.X("Probability:Q", axis=alt.Axis(format="%")),
                y=alt.Y("Crop:N", sort="-x"),
                tooltip=[alt.Tooltip("Crop:N"), alt.Tooltip("Probability:Q", format=".2%")]
            )
        )
        st.altair_chart(chart, use_container_width=True)
